<?xml version="1.0" encoding="utf-8"?>
<topic id="3a4a831b-1e7b-4e68-b614-319e3097162a" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        Twitter Snowflake-alike ID generator for .Net. Available as
        <externalLink>
          <linkText>Nuget package</linkText>
          <linkUri>https://www.nuget.org/packages/IdGen</linkUri>
        </externalLink>.
      </para>
    </introduction>

    <section>
      <title>Why</title>
      <content>
        <para>
          In certain situations you need a low-latency uncoordinated, (roughly) time ordered, compact and highly available Id generation system. This project was inspired by
          <externalLink>
            <linkText>Twitter's Snowflake</linkText>
            <linkUri>https://github.com/twitter/snowflake</linkUri>
          </externalLink>
          project which has been retired. Note that this project was inspired by Snowflake but is not an exact implementation. This library provides a basis for Id generation; it does <legacyBold>not</legacyBold> provide a service for handing out these Id's nor does it provide generator-id ('worker-id') coordination.
        </para>
      </content>
    </section>

    <section>
      <title>How it works</title>
      <content>
        <para>
          IdGen generates, like Snowflake, 64 bit Id's. The
          <externalLink>
            <linkText>Sign Bit</linkText>
            <linkUri>https://en.wikipedia.org/wiki/Sign_bit</linkUri>
          </externalLink>
          is unused since this can cause incorrect ordering on some systems that cannot use unsigned types and/or make it hard to get correct ordering. So, in effect, IdGen generates 63 bit Id's. An Id consists of 3 parts:
        </para>
        <list class="bullet">
          <listItem>
            <para>Timestamp</para>
          </listItem>
          <listItem>
            <para>Generator-id</para>
          </listItem>
          <listItem>
            <para>Sequence</para>
          </listItem>
        </list>
        <para>
          An Id generated with a <codeEntityReference linkText="Default IdStructure">P:IdGen.IdStructure.Default</codeEntityReference> is structured as follows:
        </para>
        <mediaLink>
          <image xlink:href="structure"/>
        </mediaLink>

        <para>
          However, using the <codeEntityReference linkText="IdStructure">T:IdGen.IdStructure</codeEntityReference> class you can tune the structure of the created Id's to your own needs; you can use 45 bits for the timestamp, 2 bits for the generator-id and 16 bits for the sequence if you prefer. As long as all 3 parts (timestamp, generator and sequence) add up to 63 bits you're good to go!
        </para>
        <para>
          The <codeInline>timestamp</codeInline>-part of the Id should speak for itself; by default this is incremented every millisecond and represents the number of milliseconds since a certain epoch. However, IdGen relies on an <codeEntityReference>T:IdGen.ITimeSource</codeEntityReference> which uses a 'tick' that can be defined to be anything; be it a millisecond (default), a second or even a day or nanosecond (hardware support etc. permitting). By default IdGen uses 2015-01-01 0:00:00Z as epoch, but you can specify a custom epoch too.
        </para>
        <para>
          The <codeInline>generator-id</codeInline>-part of the Id is the part that you 'configure'; it could correspond to a host, thread, datacenter or continent: it's up to you. However, the generator-id should be unique in the system: if you have several hosts or threads generating Id's, each host or thread should have it's own generator-id. This could be based on the hostname, a config-file value or even be retrieved from an coordinating service. Remember: a generator-id should be unique within the entire system to avoid collisions!
        </para>
        <para>
          The <codeInline>sequence</codeInline>-part is simply a value that is incremented each time a new Id is generated within the same tick (again, by default, a millisecond but can be anything); it is reset every time the tick changes.
        </para>
      </content>
    </section>

    <section>
      <title>System Clock Dependency</title>
      <content>
        <para>
          We recommend you use NTP to keep your system clock accurate. IdGen protects from non-monotonic clocks, i.e. clocks that run backwards. The <codeEntityReference linkText="DefaultTimeSource">T:IdGen.DefaultTimeSource</codeEntityReference> relies on a 64bit monotonic, increasing only, system counter. However, we still recommend you use NTP to keep your system clock accurate; this will prevent duplicate Id's between system restarts for example.
        </para>
        <para>
          The <codeEntityReference>T:IdGen.DefaultTimeSource</codeEntityReference> relies on a <codeEntityReference>T:System.Diagnostics.Stopwatch</codeEntityReference> for calculating the 'ticks' but you can implement your own time source by simply implementing the <codeEntityReference>T:IdGen.ITimeSource</codeEntityReference> interface.
        </para>
      </content>
    </section>

    <section>
      <title>Getting started</title>
      <content>
        <para>
          Install the
          <externalLink>
            <linkText>Nuget package</linkText>
            <linkUri>https://www.nuget.org/packages/IdGen</linkUri>
          </externalLink>
          and write the following code:
        </para>
        <code language="cs">
          <![CDATA[
            using IdGen;
            using System.Linq;

            class Program
            {
                static void Main(string[] args)
                {
                    var generator = new IdGenerator(0);
                    var id = generator.CreateId();
                }
            }
        ]]>
        </code>
        <para>Voila. You have created your first Id! Want to create 100 Id's? Instead of:</para>
        <code language="cs">
          <![CDATA[
            var id = generator.CreateId();
          ]]>
        </code>
        <para>write:</para>
        <code language="cs">
          <![CDATA[
            var id = generator.Take(100);
          ]]>
        </code>
        <para>
          This is because the <codeEntityReference linkText="IdGenerator">T:IdGen.IdGenerator</codeEntityReference> implements <codeEntityReference linkText="IEnumerable">T:System.Collections.IEnumerable</codeEntityReference> providing you with a never-ending stream of Id's (so you might want to be careful doing a <codeInline>.Select(...)</codeInline> or <codeInline>.Count()</codeInline> on it!).
        </para>
        <para>
          The above example creates a default <codeEntityReference linkText="IdGenerator">T:IdGen.IdGenerator</codeEntityReference> with the <codeEntityReference linkText="GeneratorId">P:IdGen.IdGenerator.Id</codeEntityReference> (or: 'Worker Id') set to 0 and using a <codeEntityReference>T:IdGen.DefaultTimeSource</codeEntityReference>. If you're using multiple generators (across machines or in separate threads or...) you'll want to make sure each generator is assigned it's own unique Id (and same timesource/epoch configuration). One way of doing this is by simply storing a value in your configuration file for example, another way may involve a service handing out GeneratorId's to machines/threads. IdGen <legacyBold>does not</legacyBold> provide a solution for this since each project or setup may have different requirements or infrastructure to provide these generator-id's.
        </para>
        <para>
          The below sample is a bit more complicated; we set a custom epoch, define our own structure for generated Id's and then display some information about the setup:
        </para>
        <code language="cs">
          <![CDATA[
            using IdGen;
            using System;

            class Program
            {
                static void Main(string[] args)
                {
                    // Let's say we take april 1st 2020 as our epoch
                    var epoch = new DateTime(2020, 4, 1, 0, 0, 0, DateTimeKind.Utc);
                    
                    // Create an ID with 45 bits for timestamp, 2 for generator-id 
                    // and 16 for sequence
                    var structure = new IdStructure(45, 2, 16);
                    
                    // Prepare options
                    var options = new IdGeneratorOptions(structure, new DefaultTimeSource(epoch));
                    
                    // Create an IdGenerator with it's generator-id set to 0, our custom epoch 
                    // and id-structure
                    var generator = new IdGenerator(0, options);
                    
                    // Let's ask the id-structure how many generators we could instantiate 
                    // in this setup (2 bits)
                    Console.WriteLine("Max. generators       : {0}", structure.MaxGenerators);
                    
                    // Let's ask the id-structure how many sequential Id's we could generate 
                    // in a single ms in this setup (16 bits)
                    Console.WriteLine("Id's/ms per generator : {0}", structure.MaxSequenceIds);
                    
                    // Let's calculate the number of Id's we could generate, per ms, should we use
                    // the maximum number of generators
                    Console.WriteLine("Id's/ms total         : {0}", structure.MaxGenerators * structure.MaxSequenceIds);
                    
                    
                    // Let's ask the id-structure configuration for how long we could generate Id's before
                    // we experience a 'wraparound' of the timestamp
                    Console.WriteLine("Wraparound interval   : {0}", structure.WraparoundInterval(generator.Options.TimeSource));
                    
                    // And finally: let's ask the id-structure when this wraparound will happen
                    // (we'll have to tell it the generator's epoch)
                    Console.WriteLine("Wraparound date       : {0}", structure.WraparoundDate(generator.Options.TimeSource.Epoch, generator.Options.TimeSource).ToString("O"));
                }
            }
          ]]>
        </code>
        <para>Output:</para>
        <code language="none">
          <![CDATA[
            Max. generators       : 4
            Id's/ms per generator : 65536
            Id's/ms total         : 262144
            Wraparound interval   : 407226.12:41:28.8320000 (about 1114 years)
            Wraparound date       : 3135-03-14T12:41:28.8320000+00:00
          ]]>
        </code>
        <para>
          The <codeEntityReference linkText="ITimeSource">T:IdGen.ITimeSource</codeEntityReference> interface can be handy for
          <externalLink>
            <linkText>unittesting</linkText>
            <linkUri>https://github.com/RobThree/IdGen/blob/master/IdGenTests/IdGenTests.cs</linkUri>
          </externalLink>
          purposes or if you want to provide a time-source for the timestamp part of your Id's that is not based on milliseconds (or even (system)time at all). For unittesting we use our own
          <externalLink>
            <linkText>MockTimeSource</linkText>
            <linkUri>https://github.com/RobThree/IdGen/blob/master/IdGenTests/MockTimeSource.cs</linkUri>
          </externalLink>.
        </para>
        <para>
          The <codeInline>AppConfigFactory</codeInline> class in the <codeInline>IdGen.Configuration</codeInline> package provides a 'factory method' to quickly create an IdGenerator based on a configuration file. To use this, add the following to your configuration:
        </para>
        <code language="xml">
          <![CDATA[
<configuration>
  <configSections>
    <section name="idGenSection" type="IdGen.Configuration.IdGeneratorsSection, IdGen.Configuration" />
  </configSections>

  <idGenSection>
    <idGenerators>
      <idGenerator name="foo" id="123"  epoch="2016-01-02T12:34:56" timestampBits="39" generatorIdBits="11" sequenceBits="13" tickDuration="0:00:00.001" />
      <idGenerator name="bar" id="987"  epoch="2016-02-01 01:23:45" timestampBits="20" generatorIdBits="21" sequenceBits="22" />
      <idGenerator name="baz" id="2047" epoch="2016-02-29"          timestampBits="21" generatorIdBits="21" sequenceBits="21" sequenceOverflowStrategy="SpinWait" />
    </idGenerators>
  </idGenSection>
  
</configuration>
          ]]>
        </code>
        <para>
          The attributes (<codeInline>name</codeInline>, <codeInline>id</codeInline>, <codeInline>epoch</codeInline>, <codeInline>timestampBits</codeInline>, <codeInline>generatorIdBits</codeInline> and <codeInline>sequenceBits</codeInline>) are required. The <codeInline>tickDuration</codeInline> is optional and defaults to the default tickduration from a <codeEntityReference>T:IdGen.DefaultTimeSource</codeEntityReference>. The <codeInline>sequenceOverflowStrategy</codeInline> is optional too and defaults to <codeInline>Throw</codeInline>. Valid DateTime notations for the epoch are:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeInline>yyyy-MM-ddTHH:mm:ss</codeInline>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeInline>yyyy-MM-dd HH:mm:ss</codeInline>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeInline>yyyy-MM-dd</codeInline>
            </para>
          </listItem>
        </list>
        <para>You can get the IdGenerator from the config using the following code:</para>
        <code language="cs">
          <![CDATA[
          var generator = AppConfigFactory.GetFromConfig("foo");
          ]]>
        </code>
      </content>
    </section>

    <section>
      <title>Upgrading from 2.x to 3.x</title>
      <content>
        <para>
          Upgrading from 2.x to 3.x should be pretty straightforward. See <link xlink:href="61e6c82e-b332-46f3-8972-6b2d3aa77b53" /> for the changes.
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="4491ec46-0001-46c1-88b7-3dd2ee8472f3" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>